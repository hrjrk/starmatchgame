{"ast":null,"code":"import _slicedToArray from \"/Users/hv055937/Library/MyWorkspace/myprojects/starmatchgame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/hv055937/Library/MyWorkspace/myprojects/starmatchgame/src/StarMatch.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nconst PlayNumber = props => React.createElement(\"button\", {\n  className: \"number\",\n  style: {\n    backgroundColor: colors[props.status]\n  },\n  onClick: () => props.onClick(props.buttonId, props.status),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6\n  },\n  __self: this\n}, props.buttonId);\n\nconst StarsDisplay = props => React.createElement(React.Fragment, null, utils.range(1, props.count).map(starId => React.createElement(\"div\", {\n  key: starId,\n  className: \"star\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n})));\n\nconst StarMatch = () => {\n  const _React$useState = React.useState(utils.random(1, 9)),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        stars = _React$useState2[0],\n        setStars = _React$useState2[1];\n\n  const _React$useState3 = React.useState(utils.range(1, 9)),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        availableNums = _React$useState4[0],\n        setAvailableNums = _React$useState4[1];\n\n  const _React$useState5 = React.useState([]),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        candidateNums = _React$useState6[0],\n        setCandidateNums = _React$useState6[1];\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const isGameDone = availableNums.length === 0;\n\n  const NumberStatus = buttonId => {\n    if (!availableNums.includes(buttonId)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(buttonId)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const onNumberClick = (buttonId, currentStatus) => {\n    //current status=> new status\n    if (currentStatus === 'used') {\n      return;\n    } //candidateNums\n\n\n    const newCandidateNums = currentStatus === \"available\" ? candidateNums.concat(buttonId) : candidateNums.filter(cn => cn !== buttonId);\n\n    if (utils.sum(newCandidateNums) !== stars) {\n      // wrong pick\n      setCandidateNums(newCandidateNums);\n    } else {\n      // correct pick\n      const newAvailableNums = availableNums.filter(n => !newCandidateNums.includes(n)); // redraw the no of stars from what is available\n\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"help\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Pick one or more numbers that sum to the stars.\"), React.createElement(\"div\", {\n    className: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(StarsDisplay, {\n    count: stars,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, utils.range(1, 9).map(buttonId => React.createElement(PlayNumber, {\n    key: buttonId,\n    buttonId: buttonId,\n    status: NumberStatus(buttonId),\n    onClick: onNumberClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"timer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Time remaining: 10\"));\n};\n\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n};\nconst utils = {\n  //sum an array\n  sum: arr => arr.reduce((total, num) => total + num, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(max * Math.random()),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length)];\n  }\n};\nexport default StarMatch;","map":{"version":3,"sources":["/Users/hv055937/Library/MyWorkspace/myprojects/starmatchgame/src/StarMatch.js"],"names":["React","PlayNumber","props","backgroundColor","colors","status","onClick","buttonId","StarsDisplay","utils","range","count","map","starId","StarMatch","useState","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","candidatesAreWrong","sum","isGameDone","length","NumberStatus","includes","onNumberClick","currentStatus","newCandidateNums","concat","filter","cn","newAvailableNums","n","randomSumIn","available","used","wrong","candidate","arr","reduce","total","num","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst PlayNumber = (props) => (\n    <button\n        className=\"number\"\n        style={{backgroundColor: colors[props.status]}}\n        onClick={() => props.onClick(props.buttonId, props.status)}\n    >\n        {props.buttonId}\n        </button>\n);\n\nconst StarsDisplay = (props) => (\n    <>\n        {utils.range(1, props.count).map((starId)=>\n               <div key={starId} className=\"star\"/>)\n        }\n   </>\n);\n\nconst StarMatch = () => {\n  const [stars, setStars] = React.useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = React.useState(utils.range(1, 9));\n  const [candidateNums, setCandidateNums] = React.useState([]);\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const isGameDone = availableNums.length === 0;\n  \n  const NumberStatus = (buttonId) => {\n    if(!availableNums.includes(buttonId)){\n        return 'used';\n    }\n    if(candidateNums.includes(buttonId)){\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n    return 'available';\n  };\n\n  const onNumberClick = (buttonId, currentStatus) => {\n   //current status=> new status\n      if(currentStatus === 'used'){\n        return;\n      }\n      //candidateNums\n      const newCandidateNums =\n          currentStatus === \"available\"? candidateNums.concat(buttonId): candidateNums.filter(cn => cn !== buttonId);\n\n      if(utils.sum(newCandidateNums) !== stars){ // wrong pick\n        setCandidateNums(newCandidateNums);\n      }else{   // correct pick\n        const newAvailableNums = availableNums.filter(\n            (n) => !newCandidateNums.includes(n)\n        );\n        // redraw the no of stars from what is available\n          setStars(utils.randomSumIn(newAvailableNums, 9))\n        setAvailableNums(newAvailableNums);\n        setCandidateNums([]);\n      }\n\n  };\n\n\n\n    return (\n      <div className=\"game\">\n        <div className=\"help\">\n          Pick one or more numbers that sum to the stars.\n        </div>\n        <div className=\"body\">\n          <div className=\"left\">\n              <StarsDisplay count={stars}/>\n          </div>\n          <div className=\"right\">\n              {utils.range(1, 9).map((buttonId)=>\n                  <PlayNumber\n                      key={buttonId}\n                      buttonId={buttonId}\n                      status={NumberStatus(buttonId)}\n                      onClick={onNumberClick}\n                  />\n              )}\n          </div>\n        </div>\n        <div className=\"timer\">Time remaining: 10</div>\n      </div>\n  );\n};\n\nconst colors = {\n        available: 'lightgray',\n        used: 'lightgreen',\n        wrong: 'lightcoral',\n        candidate: 'deepskyblue'\n};\n\nconst utils = {\n\n    //sum an array\n    sum: arr => arr.reduce((total, num)=> total+num, 0),\n\n    // create an array of numbers between min and max (edges included)\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n    // pick a random number between min and max (edges included)\n    random: (min, max) => min + Math.floor(max * Math.random()),\n\n    // Given an array of numbers and a max...\n    // Pick a random sum (< max) from the set of all available sums in arr\n    randomSumIn: (arr, max) => {\n        const sets = [[]];\n        const sums = [];\n        for (let i = 0; i < arr.length; i++) {\n            for (let j = 0, len = sets.length; j < len; j++) {\n                const candidateSet = sets[j].concat(arr[i]);\n                const candidateSum = utils.sum(candidateSet);\n                if (candidateSum <= max) {\n                    sets.push(candidateSet);\n                    sums.push(candidateSum);\n                }\n            }\n        }\n        return sums[utils.random(0, sums.length)];\n    },\n};\n\nexport default StarMatch;\n"]},"metadata":{},"sourceType":"module"}